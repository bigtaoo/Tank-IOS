name: iOS Build & Upload (Manual Sign per Target + API Key Upload)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app

      # 1) Install provisioning profile (tank.mobileprovision -> base64 secret)
      - name: Install provisioning profile
        run: |
          echo "${{ secrets.MOBILEPROVISION_BASE64 }}" | base64 --decode > tank.mobileprovision
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          UUID=$(/usr/libexec/PlistBuddy -c Print:UUID /dev/stdin <<< "$(security cms -D -i tank.mobileprovision)")
          cp tank.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"

      # 2) Install certificate (.p12 -> base64 secret)
      - name: Install signing certificate
        run: |
          echo "${{ secrets.P12_BASE64 }}" | base64 --decode > dist.p12
          security create-keychain -p github actions.keychain
          security import dist.p12 -k "$HOME/Library/Keychains/actions.keychain" -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s "$HOME/Library/Keychains/actions.keychain"
          security default-keychain -s "$HOME/Library/Keychains/actions.keychain"
          security unlock-keychain -p github "$HOME/Library/Keychains/actions.keychain"
          # Allow codesign without UI prompts
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k github "$HOME/Library/Keychains/actions.keychain"

      # 3) Patch signing per target using the xcodeproj gem (reliable for Unity projects)
      - name: Patch project signing (Unity-iPhone manual, UnityFramework automatic)
        run: |
          gem install xcodeproj --no-document
          ruby - <<'RUBY'
            require 'xcodeproj'
            proj_path = 'Unity-iPhone.xcodeproj'
            project   = Xcodeproj::Project.open(proj_path)

            TEAM_ID   = 'C677KJH544'
            PROFILE   = 'tank'
            APP_ID    = 'com.taowang.tank-the-future'

            app_target = project.targets.find { |t| t.name == 'Unity-iPhone' }
            fw_target  = project.targets.find { |t| t.name == 'UnityFramework' }

            raise 'Unity-iPhone target not found' unless app_target
            raise 'UnityFramework target not found' unless fw_target

            # Unity-iPhone -> Manual signing with Distribution profile
            app_target.build_configurations.each do |cfg|
              s = cfg.build_settings
              s['DEVELOPMENT_TEAM']             = TEAM_ID
              s['CODE_SIGN_STYLE']              = 'Manual'
              s['CODE_SIGN_IDENTITY']           = 'Apple Distribution'
              s['PROVISIONING_PROFILE_SPECIFIER']= PROFILE
              # Optional: make sure bundle id is correct
              # s['PRODUCT_BUNDLE_IDENTIFIER']     = APP_ID
            end

            # UnityFramework -> Automatic signing, no profile/identity
            fw_target.build_configurations.each do |cfg|
              s = cfg.build_settings
              s['DEVELOPMENT_TEAM']   = TEAM_ID
              s['CODE_SIGN_STYLE']    = 'Automatic'
              s.delete('PROVISIONING_PROFILE_SPECIFIER')
              s.delete('PROVISIONING_PROFILE')
              s.delete('CODE_SIGN_IDENTITY')
            end

            # Also fix TargetAttributes ProvisioningStyle (helps Xcode)
            target_attrs = project.root_object.attributes['TargetAttributes'] ||= {}
            target_attrs[app_target.uuid] ||= {}
            target_attrs[app_target.uuid]['ProvisioningStyle'] = 'Manual'
            target_attrs[fw_target.uuid]  ||= {}
            target_attrs[fw_target.uuid]['ProvisioningStyle']  = 'Automatic'

            project.save
          RUBY

      # 4) Archive (no global PROVISIONING_PROFILE_SPECIFIER to avoid leaking to UnityFramework)
      - name: Archive
        run: |
          xcodebuild \
            -project Unity-iPhone.xcodeproj \
            -scheme Unity-iPhone \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$PWD/build/TankIOS.xcarchive" \
            archive \
            COMPILER_INDEX_STORE_ENABLE=NO

      # 5) Export IPA
      - name: Export IPA
        run: |
          xcodebuild \
            -exportArchive \
            -archivePath "$PWD/build/TankIOS.xcarchive" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$PWD/build/output"

      # 6) Upload to TestFlight via App Store Connect API Key
      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/output/*.ipa
          issuer-id: ${{ secrets.APP_STORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_API_KEY }}

      # 7) Keep IPA as artifact
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: Tank-iOS-IPA
          path: build/output/*.ipa
