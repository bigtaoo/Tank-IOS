name: iOS Build & Upload (LFS + Per-Target Manual Sign + Stable Codesign + API Key)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: macos-latest

    steps:
      # 0) Checkout with LFS so Unity .a archives are real binaries (not LFS pointer text files)
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Ensure Git LFS content is present
        run: |
          git lfs install
          git lfs fetch --all
          git lfs pull

      - name: Verify Unity static libs are real (not LFS pointers)
        run: |
          shopt -s globstar || true
          found=0
          bad=0
          for f in Libraries/**/*.a Libraries/*.a; do
            [ -f "$f" ] || continue
            found=1
            echo "==> $f"
            ls -lh "$f" || true
            file "$f" || true
            if file "$f" | grep -qi 'text'; then
              echo "::error ::$f looks like a Git LFS pointer (text). LFS content not downloaded."
              bad=1
            fi
          done
          if [ "$found" -eq 0 ]; then
            echo "::warning ::No .a files found under Libraries/. If your project expects them, ensure they're committed (often via LFS)."
          fi
          if [ "$bad" -ne 0 ]; then
            exit 1
          fi

      # Prefer Xcode 16.4 (iOS 18.5 SDK) if available
      - name: Select Xcode
        run: |
          if [ -d "/Applications/Xcode_16.4.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.4.app
          else
            sudo xcode-select -s /Applications/Xcode.app
          fi
          xcodebuild -version
          xcodebuild -showsdks

      # 1) Install provisioning profile (base64 of tank.mobileprovision)
      - name: Install provisioning profile
        run: |
          echo "${{ secrets.MOBILEPROVISION_BASE64 }}" | base64 --decode > tank.mobileprovision
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          UUID=$(/usr/libexec/PlistBuddy -c Print:UUID /dev/stdin <<< "$(security cms -D -i tank.mobileprovision)")
          cp tank.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"

      # 2) Install Apple Distribution certificate (.p12 + password)
      - name: Install signing certificate
        run: |
          echo "${{ secrets.P12_BASE64 }}" | base64 --decode > dist.p12
          security create-keychain -p github actions.keychain
          security import dist.p12 -k "$HOME/Library/Keychains/actions.keychain" -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s "$HOME/Library/Keychains/actions.keychain"
          security default-keychain -s "$HOME/Library/Keychains/actions.keychain"
          security unlock-keychain -p github "$HOME/Library/Keychains/actions.keychain"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k github "$HOME/Library/Keychains/actions.keychain"

      # Keep keychain unlocked & show identity to prevent codesign stalls
      - name: Keep keychain unlocked + verify identity
        run: |
          security set-keychain-settings -lut 21600 "$HOME/Library/Keychains/actions.keychain"
          security unlock-keychain -p github "$HOME/Library/Keychains/actions.keychain"
          echo "== Codesigning identities in actions.keychain =="
          security find-identity -v -p codesigning "$HOME/Library/Keychains/actions.keychain" || true

      # Install WWDR intermediate (defensive)
      - name: Install Apple WWDR intermediate (optional)
        run: |
          curl -fsSL https://www.apple.com/certificateauthority/AppleWWDRCAG4.cer -o AppleWWDRCAG4.cer
          sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain AppleWWDRCAG4.cer || true

      # 3) Patch signing per target using xcodeproj:
      #    Unity-iPhone -> Manual + Apple Distribution + profile "tank"
      #    UnityFramework -> Manual + Apple Distribution, NO provisioning profile
      - name: Patch signing per target
        run: |
          gem install xcodeproj --no-document
          ruby - <<'RUBY'
            require 'xcodeproj'
            proj_path = 'Unity-iPhone.xcodeproj'
            project   = Xcodeproj::Project.open(proj_path)

            TEAM_ID   = 'C677KJH544'
            PROFILE   = 'tank'
            APP_ID    = 'com.taowang.tank-the-future'

            app = project.targets.find { |t| t.name == 'Unity-iPhone' }
            fw  = project.targets.find { |t| t.name == 'UnityFramework' }
            raise 'Unity-iPhone target not found' unless app
            raise 'UnityFramework target not found' unless fw

            # App target: Manual + Distribution + provisioning profile
            app.build_configurations.each do |cfg|
              s = cfg.build_settings
              s['DEVELOPMENT_TEAM']               = TEAM_ID
              s['CODE_SIGN_STYLE']                = 'Manual'
              s['CODE_SIGN_IDENTITY']             = 'Apple Distribution'
              s['PROVISIONING_PROFILE_SPECIFIER'] = PROFILE
              # s['PRODUCT_BUNDLE_IDENTIFIER']       = APP_ID
            end

            # Framework target: Manual + Distribution, NO provisioning profile
            fw.build_configurations.each do |cfg|
              s = cfg.build_settings
              s['DEVELOPMENT_TEAM']   = TEAM_ID
              s['CODE_SIGN_STYLE']    = 'Manual'
              s['CODE_SIGN_IDENTITY'] = 'Apple Distribution'
              s.delete('PROVISIONING_PROFILE_SPECIFIER')
              s.delete('PROVISIONING_PROFILE')
            end

            # Help Xcode honor the styles
            attrs = project.root_object.attributes['TargetAttributes'] ||= {}
            attrs[app.uuid] ||= {}
            attrs[app.uuid]['ProvisioningStyle'] = 'Manual'
            attrs[fw.uuid]  ||= {}
            attrs[fw.uuid]['ProvisioningStyle']  = 'Manual'

            project.save
          RUBY

      # 4) Show effective signing (sanity check in logs)
      - name: Show signing (Unity-iPhone)
        run: |
          xcodebuild -project Unity-iPhone.xcodeproj -target Unity-iPhone -showBuildSettings \
          | egrep -i 'CODE_SIGN|PROVISION|DEVELOPMENT_TEAM|PRODUCT_BUNDLE_IDENTIFIER' || true
      - name: Show signing (UnityFramework)
        run: |
          xcodebuild -project Unity-iPhone.xcodeproj -target UnityFramework -showBuildSettings \
          | egrep -i 'CODE_SIGN|PROVISION|DEVELOPMENT_TEAM|PRODUCT_BUNDLE_IDENTIFIER' || true

      # 5) Archive (pin to installed iPhoneOS SDK; force codesign to use our keychain & skip timestamp)
      - name: Archive
        run: |
          xcodebuild \
            -project Unity-iPhone.xcodeproj \
            -scheme Unity-iPhone \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$PWD/build/TankIOS.xcarchive" \
            archive \
            OTHER_CODE_SIGN_FLAGS="--keychain $HOME/Library/Keychains/actions.keychain --timestamp=none" \
            COMPILER_INDEX_STORE_ENABLE=NO

      # 6) Export IPA (same codesign flags)
      - name: Export IPA
        run: |
          xcodebuild \
            -exportArchive \
            -archivePath "$PWD/build/TankIOS.xcarchive" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$PWD/build/output" \
            OTHER_CODE_SIGN_FLAGS="--keychain $HOME/Library/Keychains/actions.keychain --timestamp=none"

      # 6.1) Show what's in the export folder (helps if upload can't find the ipa)
      - name: List export folder
        run: |
          echo "== build/output contents =="
          ls -lah build/output || true
          echo "== build tree =="
          find build -maxdepth 2 -type f | sed 's/^/  /'

      # 6.2) Locate exact IPA path (avoid globs passed to altool)
      - name: Locate IPA
        id: locate_ipa
        run: |
          set -e
          IPA=$(ls -1 build/output/*.ipa 2>/dev/null | head -n 1 || true)
          if [ -z "$IPA" ]; then
            echo "::error ::No .ipa found in build/output/"
            exit 1
          fi
          echo "Found IPA: $IPA"
          echo "ipa_path=$IPA" >> "$GITHUB_OUTPUT"

      # 7) Upload to TestFlight with App Store Connect API Key (use exact path)
      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ${{ steps.locate_ipa.outputs.ipa_path }}
          issuer-id: ${{ secrets.APP_STORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_API_KEY }}

      # 8) Keep IPA as artifact
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: Tank-iOS-IPA
          path: ${{ steps.locate_ipa.outputs.ipa_path }}
