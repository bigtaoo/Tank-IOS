name: iOS Build & Upload (Per-Target Manual Sign + API Key)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Prefer Xcode 16.4 (iOS 18.5 SDK) if available; else use default
      - name: Select Xcode
        run: |
          if [ -d "/Applications/Xcode_16.4.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.4.app
          else
            sudo xcode-select -s /Applications/Xcode.app
          fi
          xcodebuild -version
          xcodebuild -showsdks

      # 1) Install provisioning profile (tank.mobileprovision -> base64 secret)
      - name: Install provisioning profile
        run: |
          echo "${{ secrets.MOBILEPROVISION_BASE64 }}" | base64 --decode > tank.mobileprovision
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          UUID=$(/usr/libexec/PlistBuddy -c Print:UUID /dev/stdin <<< "$(security cms -D -i tank.mobileprovision)")
          cp tank.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"

      # 2) Install Apple Distribution certificate (.p12 -> base64 secret)
      - name: Install signing certificate
        run: |
          echo "${{ secrets.P12_BASE64 }}" | base64 --decode > dist.p12
          security create-keychain -p github actions.keychain
          security import dist.p12 -k "$HOME/Library/Keychains/actions.keychain" -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s "$HOME/Library/Keychains/actions.keychain"
          security default-keychain -s "$HOME/Library/Keychains/actions.keychain"
          security unlock-keychain -p github "$HOME/Library/Keychains/actions.keychain"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k github "$HOME/Library/Keychains/actions.keychain"

      # 3) Patch project signing with xcodeproj
      - name: Patch signing per target
        run: |
          gem install xcodeproj --no-document
          ruby - <<'RUBY'
            require 'xcodeproj'
            proj_path = 'Unity-iPhone.xcodeproj'
            project   = Xcodeproj::Project.open(proj_path)

            TEAM_ID   = 'C677KJH544'
            PROFILE   = 'tank'
            APP_ID    = 'com.taowang.tank-the-future'

            app = project.targets.find { |t| t.name == 'Unity-iPhone' }
            fw  = project.targets.find { |t| t.name == 'UnityFramework' }
            raise 'Unity-iPhone target not found' unless app
            raise 'UnityFramework target not found' unless fw

            # App target: Manual + Distribution + provisioning profile
            app.build_configurations.each do |cfg|
              s = cfg.build_settings
              s['DEVELOPMENT_TEAM']               = TEAM_ID
              s['CODE_SIGN_STYLE']                = 'Manual'
              s['CODE_SIGN_IDENTITY']             = 'Apple Distribution'
              s['PROVISIONING_PROFILE_SPECIFIER'] = PROFILE
              # s['PRODUCT_BUNDLE_IDENTIFIER']       = APP_ID
            end

            # Framework target: Manual + Distribution, NO provisioning profile
            fw.build_configurations.each do |cfg|
              s = cfg.build_settings
              s['DEVELOPMENT_TEAM']   = TEAM_ID
              s['CODE_SIGN_STYLE']    = 'Manual'
              s['CODE_SIGN_IDENTITY'] = 'Apple Distribution'
              s.delete('PROVISIONING_PROFILE_SPECIFIER')
              s.delete('PROVISIONING_PROFILE')
            end

            attrs = project.root_object.attributes['TargetAttributes'] ||= {}
            attrs[app.uuid] ||= {}
            attrs[app.uuid]['ProvisioningStyle'] = 'Manual'
            attrs[fw.uuid]  ||= {}
            attrs[fw.uuid]['ProvisioningStyle']  = 'Manual'

            project.save
          RUBY

      # 4) Show effective signing (sanity check)
      - name: Show signing (Unity-iPhone)
        run: |
          xcodebuild -project Unity-iPhone.xcodeproj -target Unity-iPhone -showBuildSettings \
          | egrep -i 'CODE_SIGN|PROVISION|DEVELOPMENT_TEAM|PRODUCT_BUNDLE_IDENTIFIER' || true
      - name: Show signing (UnityFramework)
        run: |
          xcodebuild -project Unity-iPhone.xcodeproj -target UnityFramework -showBuildSettings \
          | egrep -i 'CODE_SIGN|PROVISION|DEVELOPMENT_TEAM|PRODUCT_BUNDLE_IDENTIFIER' || true

      # 5) Archive (use explicit SDK to avoid destination resolver issues)
      - name: Archive
        run: |
          xcodebuild \
            -project Unity-iPhone.xcodeproj \
            -scheme Unity-iPhone \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$PWD/build/TankIOS.xcarchive" \
            archive \
            COMPILER_INDEX_STORE_ENABLE=NO

      # 6) Export IPA
      - name: Export IPA
        run: |
          xcodebuild \
            -exportArchive \
            -archivePath "$PWD/build/TankIOS.xcarchive" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$PWD/build/output"

      # 7) Upload to TestFlight (App Store Connect API Key)
      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/output/*.ipa
          issuer-id: ${{ secrets.APP_STORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_API_KEY }}

      # 8) Keep IPA as artifact
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: Tank-iOS-IPA
          path: build/output/*.ipa
